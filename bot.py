
import telebot
import sqlite3
from telebot import types

API_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(API_TOKEN)

DB_PATH = "slang.db"
ALLOWED_CATEGORIES = ["–∞–π—Ç–∏", "–≥–µ–π–º–µ—Ä—Å–∫–∏–π", "–º–æ–ª–æ–¥—ë–∂–Ω—ã–π", "–æ–±—â–∏–π"]

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ ---
ADMIN_ONLY = True
ADMINS = [123456789, YOUR_USER_ID_HERE]  # —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram user_id

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    # –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ —Å–ª–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS slang (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            word TEXT,
            definition TEXT,
            category TEXT,
            UNIQUE(word, category)
        )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''
        CREATE TABLE IF NOT EXISTS pending_words (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            word TEXT,
            definition TEXT,
            category TEXT,
            user_id INTEGER
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π ---
def get_definitions(word):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT definition, category FROM slang WHERE word = ?", (word.lower(),))
    results = cur.fetchall()
    conn.close()
    return results if results else None

def add_word(word, definition, category):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    try:
        cur.execute("INSERT INTO slang (word, definition, category) VALUES (?, ?, ?)",
                    (word.lower(), definition, category))
        conn.commit()
        ok = True
    except sqlite3.IntegrityError:
        ok = False
    conn.close()
    return ok

def add_pending(word, definition, category, user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT INTO pending_words (word, definition, category, user_id) VALUES (?, ?, ?, ?)",
                (word.lower(), definition, category, user_id))
    conn.commit()
    conn.close()

def get_pending():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, word, definition, category, user_id FROM pending_words")
    results = cur.fetchall()
    conn.close()
    return results

def approve_word(pending_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT word, definition, category FROM pending_words WHERE id = ?", (pending_id,))
    result = cur.fetchone()
    if result:
        word, definition, category = result
        add_word(word, definition, category)
        cur.execute("DELETE FROM pending_words WHERE id = ?", (pending_id,))
        conn.commit()
    conn.close()

def reject_word(pending_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("DELETE FROM pending_words WHERE id = ?", (pending_id,))
    conn.commit()
    conn.close()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_states = {}

# --- –ö–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=["start", "help"])
def start(message):
    uid = message.from_user.id
    if uid in ADMINS:
        txt = (
            "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëë\n\n"
            "–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞ —Å—Ä–∞–∑—É, –æ–¥–æ–±—Ä—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å—ë.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/list <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "/pending ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
            "/approve <id> ‚Äî –æ–¥–æ–±—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
            "/reject <id> ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
    else:
        txt = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–æ–≤–∞—Ä—å —Å–ª–µ–Ω–≥–∞ ü§ñ\n\n"
            "–¢—ã –º–æ–∂–µ—à—å:\n"
            "‚Äî —É–∑–Ω–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞\n"
            "‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ (–æ–Ω–æ –ø–æ–ø–∞–¥—ë—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)\n"
            "‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: " + ", ".join(ALLOWED_CATEGORIES) + "\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/list <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
    bot.send_message(message.chat.id, txt)

@bot.message_handler(commands=["cancel"])
def cancel(message):
    uid = message.from_user.id
    if uid in user_states:
        del user_states[uid]
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

@bot.message_handler(commands=["list"])
def list_category(message):
    args = message.text.split()
    if len(args) < 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /list <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\n–ü—Ä–∏–º–µ—Ä: /list –∞–π—Ç–∏")
        return
    category = args[1].lower()
    if category not in ALLOWED_CATEGORIES:
        bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞: {', '.join(ALLOWED_CATEGORIES)}")
        return
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT word, definition FROM slang WHERE category = ?", (category,))
    results = cur.fetchall()
    conn.close()
    if not results:
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    msg = f"–°–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n"
    for word, definition in results:
        msg += f"üìå {word} ‚Äî {definition}\n"
    bot.send_message(message.chat.id, msg)

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=["pending"])
def list_pending(message):
    uid = message.from_user.id
    if uid not in ADMINS:
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        return
    pending = get_pending()
    if not pending:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
        return
    msg = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
    for pid, word, definition, category, user_id in pending:
        msg += f"ID {pid}: {word} ‚Äî {definition} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})\n"
    bot.send_message(message.chat.id, msg)

@bot.message_handler(commands=["approve"])
def approve(message):
    uid = message.from_user.id
    if uid not in ADMINS:
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–¥–æ–±—Ä—è—Ç—å —Å–ª–æ–≤–∞.")
        return
    args = message.text.split()
    if len(args) < 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /approve <id>")
        return
    approve_word(int(args[1]))
    bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ ID {args[1]} –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")

@bot.message_handler(commands=["reject"])
def reject(message):
    uid = message.from_user.id
    if uid not in ADMINS:
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Å–ª–æ–≤–∞.")
        return
    args = message.text.split()
    if len(args) < 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /reject <id>")
        return
    reject_word(int(args[1]))
    bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ ID {args[1]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå")


    # --- —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ---
SPECIAL_QUESTIONS = {
    "–∫–∞–∫–∏–µ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏": lambda m: bot.send_message(m.chat.id, "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + ", ".join(ALLOWED_CATEGORIES)),
    "—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π": lambda m: bot.send_message(m.chat.id, "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + ", ".join(ALLOWED_CATEGORIES)),
    "–∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å": lambda m: send_commands(m),
    "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å": lambda m: send_commands(m)
}

def send_commands(message):
    uid = message.from_user.id
    if uid in ADMINS:
        bot.send_message(message.chat.id,
                         "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞:\n"
                         "/list <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
                         "/pending ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
                         "/approve <id> ‚Äî –æ–¥–æ–±—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
                         "/reject <id> ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
                         "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    else:
        bot.send_message(message.chat.id,
                         "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                         "/list <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
                         "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


@bot.message_handler(func=lambda m: True)
def handle_message(message):
    if not message.text:
        return
    uid = message.from_user.id
    text_raw = message.text.strip()
    text = text_raw.lower()

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ---
    for q, func in SPECIAL_QUESTIONS.items():
        if q in text:
            func(message)
            return


    # --- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ —Å–ª–æ–≤–µ—Å–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É ---
    if "—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" in text or "–ø–æ–∫–∞–∂–∏ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" in text:
        for cat in ALLOWED_CATEGORIES:
            if cat in text:
                message.text = f"/list {cat}"
                list_category(message)
                return  # <-- return –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–¥–µ—Å—å, –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏


    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    if len(text.split()) > 3:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–≥–æ.")
        return

    state = user_states.get(uid)

    # –ï—Å–ª–∏ –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if state and state.get("await_add_confirm"):
        if text in ("–¥–∞", "–¥", "yes", "y", "–¥–æ–±–∞–≤–∏—Ç—å"):
            word = state["word"]
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–∏–ª–∏ /cancel):", reply_markup=types.ReplyKeyboardRemove())
            user_states[uid] = {"adding_def": True, "word": word}
        else:
            bot.send_message(message.chat.id, "–û–∫–µ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º.", reply_markup=types.ReplyKeyboardRemove())
            del user_states[uid]
        return

    # –ï—Å–ª–∏ –∂–¥—ë–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    if state and state.get("adding_def"):
        definition = text_raw
        user_states[uid]["definition"] = definition
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for c in ALLOWED_CATEGORIES:
            markup.add(types.KeyboardButton(c))
        markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        user_states[uid]["adding_def"] = False
        user_states[uid]["adding_cat"] = True
        return

    # –ï—Å–ª–∏ –∂–¥—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if state and state.get("adding_cat"):
        if text == "–æ—Ç–º–µ–Ω–∞":
            bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
            del user_states[uid]
            return
        if text not in ALLOWED_CATEGORIES:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for c in ALLOWED_CATEGORIES:
                markup.add(types.KeyboardButton(c))
            markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
            bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=markup)
            return
        word = user_states[uid]["word"]
        definition = user_states[uid]["definition"]
        if uid in ADMINS:
            ok = add_word(word, definition, text)
            if ok:
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {text})", reply_markup=types.ReplyKeyboardRemove())
            else:
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=types.ReplyKeyboardRemove())
        else:
            add_pending(word, definition, text, uid)
            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word}' –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
        del user_states[uid]
        return

    # –ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞
    found = get_definitions(text)
    if found:
        msg = f"üìñ {text}:\n"
        for definition, category in found:
            msg += f"‚Ä¢ {definition} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})\n"
        bot.send_message(message.chat.id, msg)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("–î–∞"), types.KeyboardButton("–ù–µ—Ç"))
        bot.send_message(message.chat.id,
                         f"–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Å–ª–æ–≤–∞ '{text}'. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É? (–î–∞/–ù–µ—Ç)",
                         reply_markup=markup)
        user_states[uid] = {"await_add_confirm": True, "word": text}

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)